Learning
P1
在 To Sum中在for循环外可用抛出异常方法，也可return null
throw new IllegalArgumentException("No two sum solution");
return null;
使用最原始嵌套for循环空间复杂度O(n²),空间复杂度O(n)
方法二：
class Solution {
    public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement)) {
            return new int[] { map.get(complement), i };
        }
        map.put(nums[i], i);
    }
    throw new IllegalArgumentException("No two sum solution");
}
}
注意 ：数组有.length方法
      map中两个属性均有类型；
      map有方法containsKey(key)方法，查看是否有该key键;
      map中有get(key)方法，得到该key键的值;
      map中有put(key,value)方法;
      
      
      
      
P3	
Longest Substring Without Repeating Characters 问题
解决方法：
当 下一个未重复则加入set并j++;当出现重复，则删除set中i位置后++，最终返回j-i
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int ans = 0, i = 0, j = 0;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}
注意 ：String有.length()方法
      Set中有contains()方法；charAt()方法，从0开始

java中的ListNode链表
新建：ListNode dummyHead = new ListNode(0);
属性：.val;.next;


P9 Palindrome Number判断是否为回文数字
class Solution {
    public boolean isPalindrome(int x) {
    //若为负数或整10数返回false
        if(x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }
        //定义回文后数字
       int reversedNumber = 0;
        while(x > reversedNumber) {
            reversedNumber = reversedNumber * 10 + x % 10;
            x /= 10;
        }
        return x == reversedNumber || x == reversedNumber/10;
    }
}

P14. Longest Common Prefix最长公共前缀问题
public String longestCommonPrefix(String[] strs) {
    if (strs.length == 0) return "";
    String prefix = strs[0];
    for (int i = 1; i < strs.length; i++)
        while (strs[i].indexOf(prefix) != 0) {
            prefix = prefix.substring(0, prefix.length() - 1);
            if (prefix.isEmpty()) return "";
        }        
    return prefix;
}
string有substring()方法

P26.Remove Duplicates from Sorted Array 从排序的数组中删除重复项

class Solution {
    public int removeDuplicates(int[] nums) {
         if (nums.length == 0) return 0;
        int j = 0;
        for(int i = 0;i < nums.length;i++){        
                if(nums[i] != nums[j]){
                    j++;
                    nums[j] = nums[i];
                }           
        }
        return j+1 ;
    }
}
P27 Remove Element删除想删除的值的所有元素
方法 一：若出现要删除的值则将数组最后一个元素放在这个位置，数组长度变量减1
class Solution {
    public int removeElement(int[] nums, int val) {
        int i = 0;
        int n = nums.length;
        while(i < n){
            if(nums[i] == val){
                nums[i] = nums[n-1];
                n--;
            }else{
                i++;
            }
        }
        return n;
    }
}
方法 二：遍历所有元素，只要不相等，就把当前值覆盖放入到数组中，相等则不放
public int removeElement(int[] nums, int val) {
    int i = 0;
    for (int j = 0; j < nums.length; j++) {
        if (nums[j] != val) {
            nums[i] = nums[j];
            i++;
        }
    }
    return i;
}

P28. Implement strStr()主串中是否包含子串，若包含，给出子串所在位置下标
class Solution {
    public int strStr(String haystack, String needle) {
    //length为0则返回0
        if(haystack == null || needle == null)return 0;
    //子串比主串长，返回-1
        if(haystack.length() < needle.length()) return -1;
        for(int i = 0; i <= haystack.length()-needle.length();i++){
            boolean success = true;
            for(int j = 0; j < needle.length(); j++){
                if(haystack.charAt(i+j) != needle.charAt(j)){
                    success = false;
                    break;
                }
            }
            if(success)return i;
        }
        return -1;
    }
}
注意 ：String类型有charAt()方法，.length()方法


10. Regular Expression Matching正则表达式匹配
class Solution {
    public boolean isMatch(String text, String pattern) {
        if (pattern.isEmpty()) return text.isEmpty();
        boolean first_match = (!text.isEmpty() && 
                               (pattern.charAt(0) == text.charAt(0) || pattern.charAt(0) == '.'));
        
        if (pattern.length() >= 2 && pattern.charAt(1) == '*'){
            return (isMatch(text, pattern.substring(2)) || 
                    (first_match && isMatch(text.substring(1), pattern)));
        } else {
            return first_match && isMatch(text.substring(1), pattern.substring(1));
        }
    }
}


19. Remove Nth Node From End of List移除单链表的倒数第N个节点
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    int length  = 0;
    ListNode first = head;
    while (first != null) {
        length++;
        first = first.next;
    }
    length -= n;
    first = dummy;
    while (length > 0) {
        length--;
        first = first.next;
    }
    first.next = first.next.next;
    return dummy.next;
}
}
P21. Merged Two Sorted Lists合并两个排序的列表
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        else if (l2 == null) {
            return l1;
        }
        else if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        }
        else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
        
    }
}

P22. Generate Parentheses
描述：给定一个非负整数n，生成n对括号的所有合法排列。
解答：
该问题解的个数就是卡特兰数，但是现在不是求个数，而是要将所有合法的括号排列打印出来。
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> combinations = new ArrayList();
        generateAll(new char[2 * n], 0, combinations);
        return combinations;
    }

    public void generateAll(char[] current, int pos, List<String> result) {
        if (pos == current.length) {
            if (valid(current))
                result.add(new String(current));
        } else {
            current[pos] = '(';
            generateAll(current, pos+1, result);
            current[pos] = ')';
            generateAll(current, pos+1, result);
        }
    }

    public boolean valid(char[] current) {
        int balance = 0;
        for (char c: current) {
            if (c == '(') balance++;
            else balance--;
            if (balance < 0) return false;
        }
        return (balance == 0);
    }
}


