Learning
P1
在 To Sum中在for循环外可用抛出异常方法，也可return null
throw new IllegalArgumentException("No two sum solution");
return null;
使用最原始嵌套for循环空间复杂度O(n²),空间复杂度O(n)
方法二：
class Solution {
    public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement)) {
            return new int[] { map.get(complement), i };
        }
        map.put(nums[i], i);
    }
    throw new IllegalArgumentException("No two sum solution");
}
}
注意 ：数组有.length方法
      map中两个属性均有类型；
      map有方法containsKey(key)方法，查看是否有该key键;
      map中有get(key)方法，得到该key键的值;
      map中有put(key,value)方法;
      
      
      
      
P3	
Longest Substring Without Repeating Characters 问题
解决方法：
当 下一个未重复则加入set并j++;当出现重复，则删除set中i位置后++，最终返回j-i
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int ans = 0, i = 0, j = 0;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}
注意 ：String有.length()方法
      Set中有contains()方法；charAt()方法，从0开始

java中的ListNode链表
新建：ListNode dummyHead = new ListNode(0);
属性：.val;.next;


P9 Palindrome Number判断是否为回文数字
class Solution {
    public boolean isPalindrome(int x) {
    //若为负数或整10数返回false
        if(x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }
        //定义回文后数字
       int reversedNumber = 0;
        while(x > reversedNumber) {
            reversedNumber = reversedNumber * 10 + x % 10;
            x /= 10;
        }
        return x == reversedNumber || x == reversedNumber/10;
    }
}

P14. Longest Common Prefix最长公共前缀问题
public String longestCommonPrefix(String[] strs) {
    if (strs.length == 0) return "";
    String prefix = strs[0];
    for (int i = 1; i < strs.length; i++)
        while (strs[i].indexOf(prefix) != 0) {
            prefix = prefix.substring(0, prefix.length() - 1);
            if (prefix.isEmpty()) return "";
        }        
    return prefix;
}
string有substring()方法
